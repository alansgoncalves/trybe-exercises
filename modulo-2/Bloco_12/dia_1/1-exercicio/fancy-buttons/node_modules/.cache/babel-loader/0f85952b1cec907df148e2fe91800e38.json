{"ast":null,"code":"var _jsxFileName = \"/Users/alan/projects/trybe-exercises/modulo-2/Bloco_12/dia_1/1-exercicio/fancy-buttons/src/App.js\";\nimport React from 'react';\nimport './App.css'; // 1 - Crie uma aplicação React com npx create-react-app fancy-buttons . Altere o componente App.js para que seja um componente de classe e contenha um botão associado a um evento que imprime um texto qualquer via console.log()\n// 2 - Faça com que sua aplicação exiba três botões lado a lado com textos diferentes. Cada botão clicado deve acionar um evento diferente, cada um escrevendo algo diferente no console do navegador via console.log() .\n// function handleClick() {\n//   console.log('The world is yours!')\n// }\n// function handleClick2() {\n//   console.log('My country')\n// }\n// function handleClick3() {\n//   console.log('Scarface')\n// }\n// class App extends React.Component {\n//   render() { \n//     return (\n//       <div>\n//     <button onClick={handleClick}>Button 1</button>\n//     <button onClick={handleClick2}>Button 2</button>\n//     <button onClick={handleClick3}>Button 3</button>\n//     </div>\n//     );\n//   }\n// }\n// export default App;\n// 3 - Declare dentro da classe do seu componente dos exercícios de fixação acima a função que lida com o evento que antes era lidado por uma função do lado de fora da classe!\n// 4 - Garanta acesso ao objeto this na função que você declarou\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.handleClick = this.handleClick.bind(this)\n//     this.handleClick2 = this.handleClick2.bind(this)\n//     this.handleClick3 = this.handleClick3.bind(this)\n//   }\n// handleClick() {\n//   console.log('The world is yours!', this)  //Acesso ao objeto this na função que você declarou\n// }\n// handleClick2() {\n//   console.log('My country', this)\n// }\n// handleClick3() {\n//   console.log('Scarface', this)\n// }\n// render() {\n//   return (\n//     <div>\n//     <button onClick={this.handleClick}>Button 1</button>\n//     <button onClick={this.handleClick2}>Button 2</button>\n//     <button onClick={this.handleClick3}>Button 3</button>\n//     </div>\n//   )\n// }\n// }\n// export default App;\n// 5 - Agora você vai converter sua aplicação para uma que conta o número de cliques dado em cada botão! \n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.handleClick = this.handleClick.bind(this)\n//     this.handleClick2 = this.handleClick2.bind(this)\n//     this.handleClick3 = this.handleClick3.bind(this)\n// // Primeiramente, defina um estado inicial para a contagem de cada botão:\n//   this.state = {    // Só podemos utilizar um this.state, independente do número de funções\n//     numberOfClicks1: 0,\n//     numberOfClicks2: 0,\n//     numberOfClicks3: 0,\n//   }\n// }\n// handleClick() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks1: previousState.numberOfClicks1 + 1\n//   }))\n//   // console.log('The world is yours!', this)  //Acesso ao objeto this na função que você declarou\n// }\n// handleClick2() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks2: previousState.numberOfClicks2 + 1\n//   }))\n//   // console.log('My country', this)\n// }\n// handleClick3() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks3: previousState.numberOfClicks3 + 1\n//   }))\n//   // console.log('Scarface', this)\n// }\n// render() {\n//   return (\n//     <div>\n//     <button onClick={this.handleClick}>Button 1 | Count = {this.state.numberOfClicks1}</button>\n//     <button onClick={this.handleClick2}>Button 2 | Count = {this.state.numberOfClicks2}</button>\n//     <button onClick={this.handleClick3}>Button 3 | Count = {this.state.numberOfClicks3}</button>\n//     </div>\n//   )\n// }\n// }\n// export default App;\n// 6 - Defina uma lógica que estabeleça que, quando o número de cliques no botão for par, ele deve ser verde.\n// 7 - A cor atual do botão deve ser impressa num console.log() de dentro da função do evento que lida com o clique. Faça isso acontecer!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClick2 = this.handleClick2.bind(this);\n    this.handleClick3 = this.handleClick3.bind(this); // Primeiramente, defina um estado inicial para a contagem de cada botão:\n\n    this.state = {\n      // Só podemos utilizar um this.state, independente do número de funções\n      numberOfClicks1: 0,\n      numberOfClicks2: 0,\n      numberOfClicks3: 0,\n      color1: 'yellow',\n      color2: 'yellow',\n      color3: 'yellow'\n    };\n  }\n\n  handleClick(e) {\n    const name = e.target.innerText;\n    const index = parseInt(e.target.dataset.position);\n    this.setState((previousState, _props) => ({\n      numberOfClicks1: previousState.numberOfClicks1 + 1\n    }));\n  }\n\n  handleClick2() {\n    this.setState((previousState, _props) => ({\n      numberOfClicks2: previousState.numberOfClicks2 + 1\n    })); // console.log('My country', this)\n  }\n\n  handleClick3() {\n    this.setState((previousState, _props) => ({\n      numberOfClicks3: previousState.numberOfClicks3 + 1\n    })); // console.log('Scarface', this)\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        \"data-position\": \"0\",\n        style: {\n          backgroundColor: this.state.color1[0]\n        },\n        children: [\"Button 1 | Count = \", this.state.numberOfClicks1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick2,\n        children: [\"Button 2 | Count = \", this.state.numberOfClicks2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick3,\n        children: [\"Button 3 | Count = \", this.state.numberOfClicks3]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alan/projects/trybe-exercises/modulo-2/Bloco_12/dia_1/1-exercicio/fancy-buttons/src/App.js"],"names":["React","App","Component","constructor","handleClick","bind","handleClick2","handleClick3","state","numberOfClicks1","numberOfClicks2","numberOfClicks3","color1","color2","color3","e","name","target","innerText","index","parseInt","dataset","position","setState","previousState","_props","render","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css';\n\n// 1 - Crie uma aplicação React com npx create-react-app fancy-buttons . Altere o componente App.js para que seja um componente de classe e contenha um botão associado a um evento que imprime um texto qualquer via console.log()\n\n// 2 - Faça com que sua aplicação exiba três botões lado a lado com textos diferentes. Cada botão clicado deve acionar um evento diferente, cada um escrevendo algo diferente no console do navegador via console.log() .\n\n// function handleClick() {\n//   console.log('The world is yours!')\n// }\n\n// function handleClick2() {\n//   console.log('My country')\n// }\n\n// function handleClick3() {\n//   console.log('Scarface')\n// }\n\n// class App extends React.Component {\n//   render() { \n//     return (\n//       <div>\n//     <button onClick={handleClick}>Button 1</button>\n//     <button onClick={handleClick2}>Button 2</button>\n//     <button onClick={handleClick3}>Button 3</button>\n//     </div>\n//     );\n//   }\n// }\n \n// export default App;\n\n\n\n// 3 - Declare dentro da classe do seu componente dos exercícios de fixação acima a função que lida com o evento que antes era lidado por uma função do lado de fora da classe!\n\n// 4 - Garanta acesso ao objeto this na função que você declarou\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.handleClick = this.handleClick.bind(this)\n//     this.handleClick2 = this.handleClick2.bind(this)\n//     this.handleClick3 = this.handleClick3.bind(this)\n//   }\n\n// handleClick() {\n//   console.log('The world is yours!', this)  //Acesso ao objeto this na função que você declarou\n// }\n\n// handleClick2() {\n//   console.log('My country', this)\n// }\n\n// handleClick3() {\n//   console.log('Scarface', this)\n// }\n\n// render() {\n//   return (\n//     <div>\n//     <button onClick={this.handleClick}>Button 1</button>\n//     <button onClick={this.handleClick2}>Button 2</button>\n//     <button onClick={this.handleClick3}>Button 3</button>\n//     </div>\n//   )\n// }\n\n// }\n\n// export default App;\n\n\n// 5 - Agora você vai converter sua aplicação para uma que conta o número de cliques dado em cada botão! \n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.handleClick = this.handleClick.bind(this)\n\n//     this.handleClick2 = this.handleClick2.bind(this)\n\n//     this.handleClick3 = this.handleClick3.bind(this)\n\n// // Primeiramente, defina um estado inicial para a contagem de cada botão:\n//   this.state = {    // Só podemos utilizar um this.state, independente do número de funções\n//     numberOfClicks1: 0,\n//     numberOfClicks2: 0,\n//     numberOfClicks3: 0,\n//   }\n// }\n\n// handleClick() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks1: previousState.numberOfClicks1 + 1\n//   }))\n//   // console.log('The world is yours!', this)  //Acesso ao objeto this na função que você declarou\n// }\n\n// handleClick2() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks2: previousState.numberOfClicks2 + 1\n//   }))\n//   // console.log('My country', this)\n// }\n\n// handleClick3() {\n//   this.setState((previousState, _props) => ({\n//     numberOfClicks3: previousState.numberOfClicks3 + 1\n//   }))\n//   // console.log('Scarface', this)\n// }\n\n// render() {\n//   return (\n//     <div>\n//     <button onClick={this.handleClick}>Button 1 | Count = {this.state.numberOfClicks1}</button>\n//     <button onClick={this.handleClick2}>Button 2 | Count = {this.state.numberOfClicks2}</button>\n//     <button onClick={this.handleClick3}>Button 3 | Count = {this.state.numberOfClicks3}</button>\n//     </div>\n//   )\n// }\n// }\n\n// export default App;\n\n\n// 6 - Defina uma lógica que estabeleça que, quando o número de cliques no botão for par, ele deve ser verde.\n\n// 7 - A cor atual do botão deve ser impressa num console.log() de dentro da função do evento que lida com o clique. Faça isso acontecer!\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.handleClick = this.handleClick.bind(this)\n\n    this.handleClick2 = this.handleClick2.bind(this)\n\n    this.handleClick3 = this.handleClick3.bind(this)\n\n// Primeiramente, defina um estado inicial para a contagem de cada botão:\n  this.state = {    // Só podemos utilizar um this.state, independente do número de funções\n    numberOfClicks1: 0,\n    numberOfClicks2: 0,\n    numberOfClicks3: 0,\n    color1: 'yellow',\n    color2: 'yellow',\n    color3: 'yellow',\n  }\n}\n\nhandleClick(e) {\n    const name = e.target.innerText;\n    const index = parseInt(e.target.dataset.position)\n    this.setState((previousState, _props) => ({\n    numberOfClicks1: previousState.numberOfClicks1 + 1,\n  }))\n}\n\nhandleClick2() {\n  this.setState((previousState, _props) => ({\n    numberOfClicks2: previousState.numberOfClicks2 + 1\n  }))\n  // console.log('My country', this)\n}\n\nhandleClick3() {\n  this.setState((previousState, _props) => ({\n    numberOfClicks3: previousState.numberOfClicks3 + 1\n  }))\n  // console.log('Scarface', this)\n}\n\nrender() {\n  return (\n    <div>\n    <button onClick={this.handleClick} data-position='0' style={{backgroundColor: this.state.color1[0]}}>Button 1 | Count = {this.state.numberOfClicks1}</button>\n    <button onClick={this.handleClick2}>Button 2 | Count = {this.state.numberOfClicks2}</button>\n    <button onClick={this.handleClick3}>Button 3 | Count = {this.state.numberOfClicks3}</button>\n    </div>\n  )\n}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}